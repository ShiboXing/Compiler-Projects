import java_cup.runtime.Symbol;
import syntaxtree.*;

scan with {: 
    return lexer.next_token(); 
:};
init with{:
    
:};
parser code {: 
    
    MLexer lexer;
    @SuppressWarnings("unchecked")
    public MParser(MLexer lex) 
    { 
        super(lex); 
        lexer = lex;
    } 
    
:};

terminal PLUS,MINUS,MULTIPLY,EQUAL,NEGATION;
terminal LESSTHAN,AND,CLASS;
terminal LBRACE,RBRACE,LPAREN,RPAREN,SEMICOLON,LBRACKET,RBRACKET,DOT,COMA;
terminal STATIC,VOID,MAIN,PUBLIC;
terminal EXTENDS,RETURN,THIS,NEW;
terminal IF,ELSE,WHILE,TRUE,FALSE;
terminal SYSOUTPRINT;
terminal STRING,BOOLEAN,INT;
terminal LENGTH;
terminal INTEGER,ID;
terminal ILLEGALCHAR;

non terminal Program goal;
non terminal MainClass mainClass;
non terminal ClassDecl classDecl;
non terminal ClassDeclList classDeclList;
non terminal Identifier identifier;
non terminal StatementList stmtList;
non terminal Statement stmt;
non terminal Exp expr;
non terminal Identifier extend_what;
non terminal Type type;
non terminal MethodDecl methodDecl;
non terminal MethodDeclList methodDeclList;
non terminal FormalList paramList;
non terminal Formal param;
non terminal FormalList paramComa;
non terminal ExpList exprComp;
non terminal ExpList comaExpr;
non terminal ExpList exprParams;
non terminal VarDeclList varList;
non terminal VarDecl varDecl;

precedence left ID;
precedence left AND;
precedence left LESSTHAN;
precedence left PLUS,MINUS;
precedence left MULTIPLY;
precedence left NEGATION;
precedence left LBRACKET;


start with goal;

goal ::= mainClass:m classDeclList:cl
    {:
        RESULT=new Program(m,cl); 
    :}
    ;


mainClass ::= CLASS identifier:id1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier:id2 RPAREN LBRACE stmt:st RBRACE RBRACE
    {:
        RESULT=new MainClass(id1,id2,st);
    :}
    ;

classDecl ::= CLASS identifier:id LBRACE varList:vl methodDeclList:ml RBRACE
    {:
        
        RESULT=new ClassDeclSimple(id,vl,ml);
    :}
    |
    CLASS identifier:id extend_what:id2 LBRACE varList:vl methodDeclList:ml RBRACE
    {:
        RESULT=new ClassDeclExtends(id,id2,vl,ml);
    :}
    ;

classDeclList ::= classDeclList:cl classDecl:c
    {:
        cl.addElement(c);
        RESULT=cl;
    :}
    |
    {:
        RESULT = new ClassDeclList();
    :}
    ;


varList ::= varList:vl varDecl:vd
    {: vl.addElement(vd); 
    RESULT=vl;:}
    |
    {:
    RESULT=new VarDeclList();:}
    ;

varDecl ::= type:t identifier:id SEMICOLON
    {:
    RESULT=new VarDecl(t,id);:}
    ;
   
methodDecl ::= PUBLIC type:t identifier:id LPAREN paramList:pl RPAREN LBRACE varList:vl stmtList:sl RETURN expr:e SEMICOLON RBRACE
    {:  
    RESULT=new MethodDecl(t,id,pl,vl,sl,e);:}
    ;

methodDeclList ::= methodDeclList:ml methodDecl:m
    {: ml.addElement(m); RESULT= ml;:}
    |
    {:RESULT = new MethodDeclList(); :}
    ;

paramList ::= type:t identifier:id paramComa:pc
    {:
    pc.addElement(new Formal(t,id)); 
  
    RESULT=pc;:}
    |
    {:RESULT=new FormalList();:}
    ;


paramComa ::= COMA type:t identifier:id paramComa:pc
    {:pc.addElement(new Formal(t,id)); 
    RESULT=pc;:}
    |
    {:RESULT=new FormalList();:}
    ;



extend_what ::= EXTENDS identifier:id
    {:RESULT=id;:}
    ;

type ::= INT LBRACKET RBRACKET
    {:RESULT= new IntArrayType();:}
    |
    BOOLEAN
    {:RESULT=new BooleanType();:}
    |
    INT
    {:RESULT=new IntegerType();:}
    |
    identifier:id
    {:RESULT= new IdentifierType(id.toString());:}
    ;

identifier ::= ID:id
    {:RESULT=new Identifier((String)id);:}
    ;

stmtList ::= stmt:s stmtList:sl
    {:
     
      sl.addElement(s);
      RESULT=sl;
     :}
    |
    {:RESULT=new StatementList();:}
    ;

stmt ::= LBRACE stmtList:sl RBRACE 
    {: RESULT=new Block(sl);
   :}
    |
    IF LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
    {: RESULT=new If(e,s1,s2);:}
    |
    WHILE LPAREN expr:e RPAREN stmt:s
    {:RESULT=new While(e,s);
    :}
    |
    SYSOUTPRINT LPAREN expr:e RPAREN SEMICOLON
    {: RESULT=new Print(e);
    :}
    |
    identifier:id EQUAL expr:e SEMICOLON
    {:
    RESULT=new Assign(id,e);:}
    |
    identifier:id LBRACKET expr:e1 RBRACKET EQUAL expr:e2 SEMICOLON
    {:RESULT=new ArrayAssign(id,e1,e2);:}
    ;


expr ::= expr:e1 AND expr:e2
    {:RESULT=new Plus(e1,e2);:}
    |
    expr:e1 LESSTHAN expr:e2
    {:RESULT=new LessThan(e1,e2);:}
    |
    expr:e1 PLUS expr:e2
    {:RESULT=new Plus(e1,e2);:}
    |
    expr:e1 MINUS expr:e2
    {:RESULT=new Minus(e1,e2);:}
    |
    expr:e1 MULTIPLY expr:e2
    {:
    RESULT=new Times(e1,e2);:}
    |
    expr:e1 LBRACKET expr:e2 RBRACKET
    {:
    RESULT=new ArrayLookup(e1,e2);:}
    |
    expr:e DOT identifier:id exprComp:el
    {:RESULT=new Call(e,id,el);:}
    |
    expr:e DOT LENGTH
    {:RESULT=new ArrayLength(e);:}
    |
    INTEGER:i
    {: RESULT=new IntegerLiteral(Integer.parseInt((String)i));:}
    |
    TRUE
    {:RESULT=new True();:}
    |
    FALSE
    {:RESULT=new False();:}
    |
    identifier:id
    {:RESULT=new IdentifierExp(id.toString());:}
    |
    THIS
    {:RESULT=new This();:}
    |
    NEW INT LBRACKET expr:e RBRACKET
    {:RESULT=new NewArray(e);:}
    |
    NEW identifier:id LPAREN RPAREN
    {:RESULT=new NewObject(id);:}
    |
    NEGATION expr:e
    {:RESULT=new Not(e);:}
    |
    LPAREN expr:e RPAREN
    {:RESULT=e;:}
    ;

exprComp ::= LPAREN expr:e comaExpr:ce RPAREN 
    {:
        ExpList l=new ExpList();
        l.addElement(e);
        for(int i=0;i<ce.size();i++)
            l.addElement(ce.elementAt(i));

        RESULT=l;
    :}
    ;

comaExpr ::= comaExpr:ce COMA expr:e
    {: ce.addElement(e); 
    RESULT=ce; :}
    |
    {: RESULT = new ExpList(); :}
    ;